<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <properties resource="generatorconfig/generatorConfig.properties"/>

    <context id="ssm" targetRuntime="MyBatis3">
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />

        <!-- <plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin> -->
        <commentGenerator>
            <!-- 是否去除生成的注释 ture:是 -->
            <property name="suppressDate" value="true" />
            <property name="suppressAllComments" value="true" />
        </commentGenerator>
        <!--
        <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@10.100.1.20:1521:db1"
          userId="rams_test" password="bangsun">
        </jdbcConnection>
        -->

        <!-- 数据库连接信息 -->
        <jdbcConnection driverClass="${driver}"
                        connectionURL="${url}" userId="${username}" password="${password}">
        </jdbcConnection>

        <!-- 默认false:把JDBC DECIMAL和NUMERIC类型解析为Integer,
                 true: 把JDBC DECIMAL和NUMERIC类型解析为java.math.Bigcimal-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- targetPackage:生成PO对象位置 -->
        <javaModelGenerator targetPackage="com.shang.springboot.db.entity" targetProject="src/main/java">
            <property name="constructorBased" value="true" />
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="true" />
            <!-- trimStrings:从数据库中返回的值处理前后空格 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!-- targetPackage:生成sqlmap文件位置 -->
        <sqlMapGenerator targetPackage="com.shang.springboot.db.sqlmap" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!--targetPackagemapper接口生成位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.shang.springboot.db.mapper"
                             targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <table schema="mybatis" tableName="rep_fields" domainObjectName="RepFields">
            <property name="constructorBased" value="true" />
            <property name="useActualColumnNames" value="false" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>

        <table schema="mybatis" tableName="rep_gridpv_state_month" domainObjectName="RepGridpvStateMonth">
            <property name="constructorBased" value="true" />
            <property name="useActualColumnNames" value="false" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>

        <table schema="mybatis" tableName="rep_gridpv_state_month" domainObjectName="RepGridpvStateMonth">
            <property name="constructorBased" value="true" />
            <property name="useActualColumnNames" value="false" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>


        <table schema="mybatis" tableName="rep_pvdetails_month" domainObjectName="RepPvdetailsMonth">
            <property name="constructorBased" value="true" />
            <property name="useActualColumnNames" value="false" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>

        <table schema="mybatis" tableName="rep_overload_month" domainObjectName="RepOverloadMonth">
            <property name="constructorBased" value="true" />
            <property name="useActualColumnNames" value="false" />
            <property name="ignoreQualifiersAtRuntime" value="true" />
        </table>


        <!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 -->
        <!--<table schema="mybatis" tableName="book" domainObjectName="Book">-->
            <!--<property name="constructorBased" value="true" />-->
            <!--<property name="useActualColumnNames" value="false" />-->
            <!--<property name="ignoreQualifiersAtRuntime" value="true" />-->
        <!--</table>-->

        <!--
            table其他属性：
            enableCountByExample="false"
            enableUpdateByExample="false"
            enableDeleteByExample="false"
            enableSelectByExample="false"
            selectByExampleQueryId="false"
            schema即为数据库名, tableName为对应的数据库表, domainObjectName是要生成的实体类,
            如果想要mapper配置文件加入sql的where条件查询, 可以将enableCountByExample等设为true,
            这样就会生成一个对应domainObjectName的Example类, enableCountByExample等设为false时,
            就不会生成对应的Example类了.

            如果table里边不配置property，默认字段都生成为类属性。
            <ignoreColumn column="FRED" />//忽略字段
            <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />//无论字段是什么类型，生成的类属性都是varchar。
        -->
    </context>
</generatorConfiguration>
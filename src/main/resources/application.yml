amazon:
  associateId: habuma-20

error:
  whitelabel:
    enabled: false

spring:
  profiles:
    active: dev

logging:
  level:
    root: INFO

---
spring:
  profiles: dev
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/readinglist
    driver-class-name: com.mysql.jdbc.Driver
    username: root
    password: 123456
    initialSize: 5  # 下面为连接池的补充设置，应用到上面所有数据源中# 初始化大小，最小，最大
    minIdle: 5 #	最小连接池数量
    maxActive: 20 # 最大连接池数量
#    poolPreparedStatements: true   # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
#    maxPoolPreparedStatementPerConnectionSize: 50
    maxWait: 60000  #	获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
    timeBetweenEvictionRunsMillis: 60000 #有两个含义：   1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
    minEvictableIdleTimeMillis: 300000 # 配置一个 连接在池中最小生存的时间，单位是毫秒
    validationQuery: SELECT 1 FROM DUAL #	用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
    testWhileIdle: true # 	申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnBorrow: false #   归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnReturn: false #	建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    filters: stat,wall,log4j   # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000   # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
